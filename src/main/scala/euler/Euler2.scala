package euler

import scala.collection.mutable.ListBuffer

import scala.util.control._


/**
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * 
 */
class Euler2(val maxSequenceValue : Int) extends EulerSolver {

  var fibSequenceList : ListBuffer[Int] = new ListBuffer[Int]

  this.generateFibSequence()


  private def generateFibSequence(): Unit = {

    var i = 0
    val loop = new Breaks
    var fibValue = 1
    var fibSequence = 1

    loop.breakable {

      while ( fibValue <= maxSequenceValue ) {
        if ( fibSequence == 1 || fibSequence == 2) {
          fibSequenceList += fibSequence
        } else {
          fibValue = fibSequenceList(fibSequenceList.size - 2) + fibSequenceList(fibSequenceList.size - 1)
          fibSequenceList += fibValue
        }
        fibSequence += 1

      }
    }

  }

  override def solve(): Long = {
    return fibSequenceList.filter(e => e % 2 == 0 ).sum //.foldLeft(0) ( (total,num ) => total + num )
  }

}
